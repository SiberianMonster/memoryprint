swagger: "2.0"
info:
  title: Memory Print - OpenAPI 3.0
  version: "0.1"
  description: "basePath: http://memoryprint.ru:8080/api/v1 "
  
tags:

  - name: auth
    description: endpoints for authorization
  - name: images
    description: endpoints for image converting
  - name: backgrounds
    description: endpoints for backgrounds
  - name: decorations
    description: endpoints for decorations
  - name: layouts
    description: endpoints for layouts
  - name: projects
    description: endpoints for projects
  - name: templates
    description: endpoints for templates
  - name: photos
    description: endpoints for photos


paths:
  /auth/signup:
    post:
      tags:
        - auth
      summary: Register new user
      description: Pass registration data
      consumes:
       - application/json
      parameters:
        - in: body
          name: signupuser
          schema:
              type: object
              properties:
                name:          
                  type: string
                  minLength: 1
                  maxLength: 20
                email:    
                  type: string
                password:    
                  type: string
                  minLength: 5
                  maxLength: 20
          required: true
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  token:
                    type: string
                    description: access token with 90 days expiration
        '409':
          description: User with this email already exists
          schema:
                $ref: '#/definitions/Error'
        '500':
          description: unable to send email
          schema:
                $ref: '#/definitions/Error'
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /auth/login:
    post:
      tags:
        - auth
      summary: Login existing user
      description: Pass email and password
      consumes:
       - application/json
      parameters:
        - in: body
          name: loginuser
          schema:
              type: object
              properties:
                email:    
                  type: string
                password:    
                  type: string
                  minLength: 5
                  maxLength: 20
          required: true
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  token:
                    type: string
                    description: access token with 90 days expiration
        '401':
          description: Wrong password
          schema:
                $ref: '#/definitions/Error'
        '404':
          description: User with this email does not exist
          schema:
                $ref: '#/definitions/Error'
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /auth/restore:
    post:
      tags:
        - auth
      summary: Restore account access with temporary pass
      description: Pass registered email address
      consumes:
       - application/json
      parameters:
        - in: body
          name: recoveryemail
          schema:
              type: object
              properties:
                email:    
                  type: string
          required: true
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '404':
          description: User with this email does not exist
          schema:
                $ref: '#/definitions/Error'
        '500':
          description: unable to send email
          schema:
                $ref: '#/definitions/Error'
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /auth/get-user:
    get:
      tags:
        - auth
      summary: Check user status
      parameters:
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/User'
        '401':
          description: Unauthorized
  /load-backgrounds:
    get:
      tags:
        - backgrounds
      summary: Load all backgrounds from database
      parameters:
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
        - in: query
          name: offset
          required: true
          type: integer
        - in: query
          name: limit
          required: true
          type: integer
        - in: query
          name: type
          required: true
          type: string
          description: Type of object -- applicable for decorations and backgrounds 
          enum:
              - "VACATION"
              - "WEDDING"
              - "HOLIDAYS"
              - "CHILDREN"
              - "ANIMALS"
              - "UNIVERSAL"
        - in: query
          name: is_favourite
          required: true
          type: boolean
        - in: query
          name: ispersonal
          required: true
          type: boolean
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseBackground'
        '401':
          description: Unauthorized
  /admin/create-background:
    post:
      tags:
        - backgrounds
      summary: Create new background
      consumes:
       - application/json
      parameters:
        - in: body
          name: background
          schema:
              $ref: '#/definitions/Background'
          required: true
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseCreatedBackground'
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /admin/update-background/{id}:
    post:
      tags:
        - backgrounds
      summary: Update existing background
      consumes:
       - application/json
      parameters:
        - in: body
          name: background
          schema:
              $ref: '#/definitions/Background'
          required: true
        - name: id
          in: path
          description: id of background to update
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /admin/delete-background/{id}:
    post:
      tags:
        - backgrounds
      summary: Delete existing background
      parameters:
        - name: id
          in: path
          description: id of background to delete
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /create-background:
    post:
      tags:
        - backgrounds
      summary: Create custom user background
      consumes:
       - application/json
      parameters:
        - in: body
          name: background
          schema:
              type: object
              properties:
                link:    
                  type: string
          required: true
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseCreatedBackground'
        '401':
          description: Unauthorized
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /delete-background/{id}:
    post:
      tags:
        - backgrounds
      summary: Delete existing background
      parameters:
        - name: id
          in: path
          description: id of background to delete
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
  /change-favourite-background/{id}:
    post:
      tags:
        - backgrounds
      summary: Update favourite bool for existing background
      consumes:
       - application/json
      parameters:
        - in: body
          name: background
          schema:
            type: object
            properties:
                is_favourite:    
                  type: boolean 
          required: true
        - name: id
          in: path
          description: id of background to (un)favour
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
  /load-decorations:
    post:
      tags:
        - decorations
      summary: Load all decorations from database
      parameters:
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
        - in: query
          name: offset
          required: true
          type: integer
        - in: query
          name: limit
          required: true
          type: integer
        - in: query
          name: type
          required: true
          type: string
          description: Type of object -- applicable for decorations and backgrounds 
          enum:
              - "VACATION"
              - "WEDDING"
              - "HOLIDAYS"
              - "CHILDREN"
              - "ANIMALS"
              - "UNIVERSAL"
        - in: query
          name: category
          required: true
          type: string
          description: Type of object -- applicable for decorations. 
          enum:
              - "RIBBON"
              - "FRAME"
              - "STICKER"
        - in: query
          required: true
          name: isfavourite
          type: boolean
        - in: query
          name: ispersonal
          required: true
          type: boolean
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseDecoration'
        '401':
          description: Unauthorized
  /admin/create-decoration:
    post:
      tags:
        - decorations
      summary: Create new decoration
      consumes:
       - application/json
      parameters:
        - in: body
          name: decoration
          schema:
            $ref: '#/definitions/Decoration'
          required: true
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string

      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseCreatedDecoration'
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /admin/update-decoration/{id}:
    post:
      tags:
        - decorations
      summary: Update existing decoration
      consumes:
       - application/json
      parameters:
        - in: body
          name: decoration
          schema:
            $ref: '#/definitions/Decoration'
          required: true
        - name: id
          in: path
          description: id of decoration to update
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
    
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /admin/delete-decoration/{id}:
    post:
      tags:
        - decorations
      summary: Delete existing decoration
      parameters:
        - name: id
          in: path
          description: id of decoration to delete
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /create-decoration:
    post:
      tags:
        - decorations
      summary: Create custom user decoration
      consumes:
       - application/json
      parameters:
        - in: body
          name: decoration
          schema:
            type: object
            properties:
                link:    
                  type: string
          required: true
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseCreatedDecoration'
        '401':
          description: Unauthorized
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /delete-decoration/{id}:
    post:
      tags:
        - decorations
      summary: Delete existing decoration
      parameters:
        - name: id
          in: path
          description: id of decoration to delete
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
  /change-favourite-decoration/{id}:
    post:
      tags:
        - decorations
      summary: Update favourite bool for existing decoration
      consumes:
       - application/json
      parameters:
        - in: body
          name: decoration
          schema:
            type: object
            properties:
                is_favourite:    
                  type: boolean 
          required: true
        - name: id
          in: path
          description: id of decoration to (un)favour
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
  /load-layouts:
    get:
      tags:
        - layouts
      summary: Load all layouts from database
      parameters:
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
        - in: query
          name: offset
          required: true
          type: integer
        - in: query
          name: limit
          required: true
          type: integer
        - in: query
          name: size
          required: true
          type: integer
        - in: query
          name: count_images
          required: true
          type: integer
        - in: query
          name: is_favourite
          required: true
          type: boolean
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseLayout'
        '401':
          description: Unauthorized
  /admin/create-layout:
    post:
      tags:
        - layouts
      summary: Create new layout
      consumes:
       - application/json
      parameters:
        - in: body
          name: layout
          schema:
            $ref: '#/definitions/Layout'
          required: true
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseCreatedLayout'
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /admin/delete-layout/{id}:
    post:
      tags:
        - layouts
      summary: Delete existing layout
      parameters:
        - name: id
          in: path
          description: id of layout to delete
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /change-favourite-layout/{id}:
    post:
      tags:
        - layouts
      summary: Update favourite bool for existing layout
      consumes:
       - application/json
      parameters:
        - in: body
          name: layout
          schema:
            type: object
            properties:
                is_favourite:    
                  type: boolean 
          required: true
        - name: id
          in: path
          description: id of layout to (un)favour
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
  /load-projects:
    get:
      tags:
        - projects
      summary: Load user projects
      parameters:
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: array
                items:
                  $ref: '#/definitions/ResponseProject'   
        '401':
          description: Unauthorized
  /load-project/{id}:
    get:
      tags:
        - projects
      summary: Load selected user project
      parameters:
        - name: id
          in: path
          description: id of project to load
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/SavedProjectObj' 
        '401':
          description: Unauthorized
  /load-template/{id}:
    get:
      tags:
        - templates
      summary: Load template
      parameters:
        - name: id
          in: path
          description: template id
          required: true
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/SavedTemplateObj' 
        '401':
          description: Unauthorized
  /create-project:
    post:
      tags:
        - projects
      summary: Create new project
      consumes:
       - application/json
      parameters:
        - in: body
          name: project
          schema:
            $ref: '#/definitions/NewBlankProjectObj' 
          required: true
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseCreatedProject'
        '401':
          description: Unauthorized
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'

  /create-pdf-link/{id}:
    post:
      tags:
        - projects
      summary: Generate pdf file link for the project
      parameters:
        - name: id
          in: path
          description: id of project to load
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ImageRespBody' 
        '401':
          description: Unauthorized

  /save-project-pages/{id}:
    post:
      tags:
        - projects
      summary: Save and update existing project pages
      consumes:
       - application/json
      parameters:
        - in: body
          name: pages
          schema:
            $ref: '#/definitions/RequestSavePages' 
          required: true
        - name: id
          in: path
          description: id of the page to save
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
        '404':
          description: One or more pages are missing
          schema:
                $ref: '#/definitions/Error'
  /add-pages/{id}:
    post:
      tags:
        - projects
      summary: Add pages to existing project
      consumes:
       - application/json
      parameters:
        - in: body
          name: pages
          schema:
            $ref: '#/definitions/RequestAddPage' 
          required: true
        - name: id
          in: path
          description: id of the project where new pages will be added
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: array
                items:
                  $ref: '#/definitions/OrderPage'   
        '401':
          description: Unauthorized
        '404':
          description: One or more pages are missing
          schema:
                $ref: '#/definitions/Error'
  /delete-pages/{id}:
    post:
      tags:
        - projects
      summary: Delete project pages
      consumes:
       - application/json
      parameters:
        - in: body
          name: pages
          schema:
            $ref: '#/definitions/RequestDeletePage' 
          required: true
        - name: id
          in: path
          description: id of the project where pages will be deleted
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
  /reorder-pages/{id}:
    post:
      tags:
        - projects
      summary: Reorder project pages
      consumes:
       - application/json
      parameters:
        - in: body
          name: pages
          schema:
            $ref: '#/definitions/RequestReorderPage' 
          required: true
        - name: id
          in: path
          description: id of the project where pages will be reordered
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
        '406':
          description: Not all pages passed
          schema:
                $ref: '#/definitions/Error'
        '404':
          description: One or more pages are missing
          schema:
                $ref: '#/definitions/Error'
        '405':
          description: Attempt to reorder a cover page
          schema:
                $ref: '#/definitions/Error'
        '503':
          description: Order of pages is corrupted
          schema:
                $ref: '#/definitions/Error'
  /load-templates:
    get:
      tags:
        - templates
      summary: Load templates
      parameters:
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
        - in: query
          name: offset
          required: true
          type: integer
        - in: query
          name: limit
          required: true
          type: integer
        - in: query
          name: category
          required: true
          type: string
          description: Category of template
          enum:
              - "VACATION"
              - "WEDDING"
              - "HOLIDAYS"
              - "CHILDREN"
              - "ANIMALS"
              - "UNIVERSAL"
        - in: query
          name: size
          required: true
          type: string
          description: Size of template
          enum:
              - "SMALL_SQUARE"
              - "SQUARE"
              - "VERTICAL"
              - "HORIZONTAL"
      responses:
        '200':
          description: Successful operation
          schema:
                type: array
                items:
                  $ref: '#/definitions/ResponseTemplates'  
  /admin/create-template:
    post:
      tags:
        - templates
      summary: Create new template
      consumes:
       - application/json
      parameters:
        - in: body
          name: template
          schema:
            type: object
            properties:
                size:    
                  type: string 
                  enum:
                  - "SMALL_SQUARE"
                  - "SQUARE"
                  - "VERTICAL"
                  - "HORIZONTAL"
                category:    
                  type: string 
                  enum:
                  - "VACATION"
                  - "WEDDING"
                  - "HOLIDAYS"
                  - "CHILDREN"
                  - "ANIMALS"
                  - "UNIVERSAL"
                name:    
                  type: string 
                  minLength: 2
                  maxLength: 40
          required: true
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseCreatedTemplate'
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /admin/save-template-pages/{id}:
    post:
      tags:
        - templates
      summary: Save and update existing template pages
      consumes:
       - application/json
      parameters:
        - in: body
          name: pages
          schema:
            $ref: '#/definitions/RequestSavePages' 
          required: true
        - name: id
          in: path
          description: id of the page to save
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /admin/add-template-pages/{id}:
    post:
      tags:
        - templates
      summary: Add pages to existing project
      consumes:
       - application/json
      parameters:
        - in: body
          name: pages
          schema:
            $ref: '#/definitions/RequestAddPage' 
          required: true
        - name: id
          in: path
          description: id of the template where new pages will be added
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: array
                items:
                  $ref: '#/definitions/OrderPage'  
        '404':
          description: One or more pages are missing
          schema:
                $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /admin/delete-template-pages/{id}:
    post:
      tags:
        - templates
      summary: Delete template pages
      consumes:
       - application/json
      parameters:
        - in: body
          name: pages
          schema:
            $ref: '#/definitions/RequestDeletePage' 
          required: true
        - name: id
          in: path
          description: id of the template where pages will be deleted
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '404':
          description: One or more pages are missing
          schema:
                $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /admin/reorder-template-pages/{id}:
    post:
      tags:
        - templates
      summary: Reorder template pages
      consumes:
       - application/json
      parameters:
        - in: body
          name: pages
          schema:
            $ref: '#/definitions/RequestReorderPage' 
          required: true
        - name: id
          in: path
          description: id of the template where pages will be reordered
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                     
        '406':
          description: Not all pages passed
          schema:
                $ref: '#/definitions/Error'
        '404':
          description: One or more pages are missing
          schema:
                $ref: '#/definitions/Error'
        '405':
          description: Attempt to reorder a cover page
          schema:
                $ref: '#/definitions/Error'
        '503':
          description: Order of pages is corrupted
          schema:
                $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /admin/publish-template/{id}:
    post:
      tags:
        - templates
      summary: Publish template
      parameters:
        - name: id
          in: path
          description: id of the template
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                     
        '401':
          description: Unauthorized
        '403':
          description: Need higher permission level
  /load-photos:
    get:
      tags:
        - photos
      summary: Load user photos
      parameters:
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
        - in: query
          name: offset
          required: true
          type: integer
        - in: query
          name: limit
          required: true
          type: integer
     
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponsePhotos'
        '401':
          description: Unauthorized
  /upload-photo:
    post:
      tags:
        - photos
      summary: Add new photo for user
      consumes:
       - application/json
      parameters:
        - in: body
          name: photo
          schema:
            $ref: '#/definitions/Photo' 
          required: true
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ResponseUploadedPhoto'
        '401':
          description: Unauthorized
        '422':
          description: validation error
          schema:
                $ref: '#/definitions/ValidationError'
  /delete-photo/{id}:
    post:
      tags:
        - photos
      summary: Delete user photo
      parameters:
        - name: id
          in: path
          description: id of photo to delete
          required: true
          type: integer
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                type: object
                properties:
                  response:
                    type: integer
                    
        '401':
          description: Unauthorized
  /image/save:
    post:
      tags:
        - images
      summary: Upload new image object
      consumes:
       - multipart/form-data
      parameters:
        - in: body
          name: photo
          schema:
            type: object
            properties:
                image:
                  type: object
                  format: binary
                extention:
                  type: string
                  format: binary
                remove_background:
                  type: boolean
                  format: binary
          required: true
        - name: auth
          in: header
          description: Bearer access token
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
                $ref: '#/definitions/ImageRespBody'
        '409':
          description: Failed to remove background for image
          schema:
                $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
        '415':
          description: Image format is not allowed

definitions:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    ValidationError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/definitions/SingleError'
      required:
        - code
        - message
        - data
    SingleError:
      type: object
      properties:
        field:
          type: string
        msg:
          type: string
    IsAdmin:
      type: object
      properties:
        is_admin:
          type: boolean
    User:
      type: object
      properties:
        user:
          $ref: '#/definitions/IsAdmin'
    Photo:
      required:
          - link
      type: object
      properties:
        photo_id:
          type: integer
          format: int
          example: 10
        link:
          type: string
          description: timeweb s3 storage link for the object
    Layout:
      required:
          - link
          - count_images
          - data
          - size
      type: object
      properties:
        layout_id:
          type: integer
          format: int
          example: 10
        link:
          type: string
          description: timeweb s3 storage link for the object
        count_images:
          type: integer
          format: int
          description: Number of photos in layout
          minimum: 1
          maximum: 6
        size:
          type: string
          enum:
            - "SMALL_SQUARE"
            - "SQUARE"
            - "VERTICAL"
            - "HORIZONTAL"
        data:
          type: object
          description: Json data generated by FabricJS
        is_favourite:
          type: boolean
    Decoration:
      required:
          - link
          - category
          - type
      type: object
      properties:
        decoration_id:
          type: integer
          format: int
          example: 10
        link:
          type: string
          description: timeweb s3 storage link for the object
        type:
          type: string
          description: Type of object -- applicable for decorations and backgrounds 
          enum:
            - "VACATION"
            - "WEDDING"
            - "HOLIDAYS"
            - "CHILDREN"
            - "ANIMALS"
            - "UNIVERSAL"
        category:
          type: string
          description: Type of object -- applicable for decorations. 
          enum:
            - "RIBBON"
            - "FRAME"
            - "STICKER"
        is_favourite:
          type: boolean
          description: Boolean for liked objects
        is_personal:
          type: boolean
          description: Boolean for personal uploaded objects
    Background:
      required:
          - link
          - type
      type: object
      properties:
        background_id:
          type: integer
          format: int
          example: 10
        link:
          type: string
          description: timeweb s3 storage link for the object
        type:
          type: string
          description: Type of object -- applicable for decorations and backgrounds 
          enum:
            - "VACATION"
            - "WEDDING"
            - "HOLIDAYS"
            - "CHILDREN"
            - "ANIMALS"
            - "UNIVERSAL"
        is_favourite:
          type: boolean
          description: Boolean for liked objects
        is_personal:
          type: boolean
          description: Boolean for personal uploaded objects
    ProjectObj:
      required:
          - name
          - size
          - variant
          - created_at
          - updated_at
      type: object
      properties:
        name:
          type: string
        size:
          type: string
          enum:
            - "SMALL_SQUARE"
            - "SQUARE"
            - "VERTICAL"
            - "HORIZONTAL"
        variant:
          type: string
          enum:
            - "STANDARD"
            - "PREMIUM"
        created_at:
          type: integer
          example: "1709213484"
        updated_at:
          type: integer
          example: "1709213484"
    Template:
      required:
          - template_id
          - name
          - size
          - preview_image_link
          - front_page
      type: object
      properties:
        template_id:
          type: integer
          format: int
          example: 10
        name:
          type: string
        size:
          type: string
          enum:
            - "SMALL_SQUARE"
            - "SQUARE"
            - "VERTICAL"
            - "HORIZONTAL"
        preview_image_link:
          type: string
        updated_at:
          type: integer
          example: "1709213484"
        front_page:
          $ref: '#/definitions/FrontPage'
    ResponseProject:
      required:
          - project_id
          - name
          - count_pages
          - preview_image_link
          - size
          - variant
          - updated_at
      type: object
      properties:
        project_id:
          type: integer
        name:
          type: string
        count_pages:
          type: integer
          description: Number of project pages
        preview_image_link:
          type: string
          description: Front cover image
        size:
          type: string
          enum:
            - "SMALL_SQUARE"
            - "SQUARE"
            - "VERTICAL"
            - "HORIZONTAL"
        variant:
          type: string
          enum:
            - "STANDARD"
            - "PREMIUM"
        updated_at:
          type: integer
          example: "1709213484"
    NewBlankProjectObj:
      required:
          - size
          - variant
          - cover
          - surface
      type: object
      properties:
        name:
          type: string
        size:
          type: string
          enum:
            - "SMALL_SQUARE"
            - "SQUARE"
            - "VERTICAL"
            - "HORIZONTAL"
        variant:
          type: string
          enum:
            - "STANDARD"
            - "PREMIUM"
        cover:
          type: string
          enum:
            - "HARD"
            - "LEATHERETTE"
        surface:
          type: string
          enum:
            - "GLOSS"
            - "MATTE"
        template_id:
          type: integer
          description: template used as the base for the new project
    Page:
      required:
          - page_id
          - type
          - sort
          - creating_image_link
          - data
          - used_photo_ids
      type: object
      properties:
        page_id:
          type: integer
          format: int
          description: PageID of the project page. The model is used to retrieve project pages
          example: 10
        type:
          type: string
          enum:
            - "FRONT"
            - "BACK"
            - "PAGE"
        sort:
          type: integer
          format: int
          description: Page order number in the project
        creating_image_link:
          type: string
          description: Page preview
        data:
          type: object
          description: Json data generated by FabricJS
        used_photo_ids:
          type: array
          items:
            type: integer
    TemplatePage:
      required:
          - page_id
          - type
          - sort
          - creating_image_link
      type: object
      properties:
        page_id:
          type: integer
          format: int
          description: PageID of the project page. The model is used to retrieve project pages
          example: 10
        type:
          type: string
          enum:
            - "FRONT"
            - "BACK"
            - "PAGE"
        sort:
          type: integer
          format: int
          description: Page order number in the project
        creating_image_link:
          type: string
          description: Page preview
    SavePage:
      required:
          - page_id
          - preview_image_link
          - creating_image_link
          - data
          - used_photo_ids
      type: object
      properties:
        page_id:
          type: integer
          format: int
          description: PageID of the project page. The model is used to save and update project pages
          example: 10
        preview_image_link:
          type: string
          description: Page view for pdf export
        creating_image_link:
          type: string
          description: Page preview to display on the left side container
        data:
          type: object
          description: Json data generated by FabricJS
        used_photo_ids:
          type: array
          items:
            type: integer
    SavedProjectObj:
      required:
          - project
          - pages
      type: object
      properties:
        project:
          $ref: '#/definitions/ProjectObj'
        pages:
          type: array
          items:
            $ref: '#/definitions/Page'
    SavedTemplateObj:
      required:
          - name
          - size
          - created_at
          - updated_at
          - pages
      type: object
      properties:
        name:
          type: string
        size:
          type: string
          enum:
            - "SMALL_SQUARE"
            - "SQUARE"
            - "VERTICAL"
            - "HORIZONTAL"
        created_at:
          type: integer
          example: "1709213484"
        updated_at:
          type: integer
          example: "1709213484"
        pages:
          type: array
          items:
            $ref: '#/definitions/TemplatePage'
    RequestSavePages:
      required:
          - pages
      type: object
      properties:
        pages:
          type: array
          items:
            $ref: '#/definitions/SavePage'
    NewPage:
      required:
          - sort
      type: object
      properties:
        clone_id:
          type: integer
          format: int
          example: 10
        sort:
          type: integer
          format: int
          example: 10
    RequestAddPage:
      required:
          - pages
      type: object
      properties:
        pages:
          type: array
          items:
            $ref: '#/definitions/NewPage'
    RequestDeletePage:
      required:
          - page_ids
      type: object
      properties:
        page_ids:
          type: array
          items:
            type: integer
    OrderPage:
      required:
          - page_id
          - sort
      type: object
      properties:
        page_id:
          type: integer
          format: int
          example: 10
        sort:
          type: integer
          format: int
          example: 10
    RequestReorderPage:
      required:
          - pages
      type: object
      properties:
        pages:
          type: array
          items:
            $ref: '#/definitions/OrderPage'

    NewTemplate:
      required:
          - size
          - category
      type: object
      properties:
        size:
          type: string
          enum:
            - "SMALL_SQUARE"
            - "SQUARE"
            - "VERTICAL"
            - "HORIZONTAL"
        category:
          type: string
          enum:
            - "VACATION"
            - "WEDDING"
            - "HOLIDAYS"
            - "CHILDREN"
            - "ANIMALS"
            - "UNIVERSAL"
    ResponseCreatedProject:
      required:
          - project_id
      type: object
      properties:
        project_id:
          type: integer
    ResponseCreatedTemplate:
      required:
          - template_id
      type: object
      properties:
        template_id:
          type: integer
    ResponseTemplates:
      required:
          - templates
          - count_all
      type: object
      properties:
        templates:
          type: array
          items:
            $ref: '#/definitions/Template'
        count_all:
          type: integer
    ResponsePhotos:
      required:
          - photos
          - count_all
      type: object
      properties:
        photos:
          type: array
          items:
            $ref: '#/definitions/Photo'
        count_all:
          type: integer
    ResponseUploadedPhoto:
      required:
          - photo_id
      type: object
      properties:
        photo_id:
          type: integer
    ResponseCreatedLayout:
      required:
          - layout_id
      type: object
      properties:
        layout_id:
          type: integer
    ResponseCreatedBackground:
      required:
          - background_id
      type: object
      properties:
        background_id:
          type: integer
    ResponseCreatedDecoration:
      required:
          - decoration_id
      type: object
      properties:
        decoration_id:
          type: integer
    ResponseLayout:
      required:
          - layouts
          - count_all
          - count_favourite
      type: object
      properties:
        layouts:
          type: array
          items:
            $ref: '#/definitions/Layout'
        count_all:
          type: integer
    ResponseDecoration:
      required:
          - decorations
          - count_all
          - count_favourite
      type: object
      properties:
        decorations:
          type: array
          items:
            $ref: '#/definitions/Decoration'
        count_all:
          type: integer
        count_favourite:
          type: integer
        count_personal:
          type: integer
    ResponseBackground:
      required:
          - backgrounds
          - count_all
      type: object
      properties:
        backgrounds:
          type: array
          items:
            $ref: '#/definitions/Background'
        count_all:
          type: integer
        count_favourite:
          type: integer
        count_personal:
          type: integer
    ImageRespBody:
      required:
          - link
      type: object
      properties:
        link:
          type: string
    FrontPage:
      required:
          - creating_image_link
          - data
      type: object
      properties:
        creating_image_link:
          type: string
        data:
          type: object
          description: Json data generated by FabricJS

